{"version":3,"file":"kotlinx-coroutines-core.js","sources":["../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/AbstractCoroutine.kt","util/Preconditions.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/CompletedExceptionally.kt","util/Standard.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/CoroutineStart.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/Dispatched.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/ResumeMode.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/internal/Symbol.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/intrinsics/Cancellable.kt","../../../../../../common/kotlinx-coroutines-core-common/src/main/kotlin/kotlinx/coroutines/experimental/intrinsics/Undispatched.kt","core/coroutinesIntrinsics.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/AbstractContinuation.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Builders.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/CancellableContinuation.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/CompletableDeferred.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/CoroutineContext.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/CoroutineDispatcher.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/CoroutineExceptionHandler.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Debug.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Deferred.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Delay.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Exceptions.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/JSDispatcher.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Job.kt","core/generated/_SequencesJs.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/internal/LinkedList.kt","text/StringBuilder.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/NonCancellable.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Promise.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Scheduled.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Window.kt","../../../../src/main/kotlin/kotlinx/coroutines/experimental/Yield.kt","core/core.kt"],"sourcesContent":[null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> checkNotNull(value: T?): T = checkNotNull(value) { \"Required value was null.\" }\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.coroutines.experimental.intrinsics\n\nimport kotlin.coroutines.experimental.Continuation\n\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n        completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n        receiver: R,\n        completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@SinceKotlin(\"1.1\")\npublic fun <R, T> (suspend R.() -> T).createCoroutineUnchecked(\n        receiver: R,\n        completion: Continuation<T>\n): Continuation<Unit> = this.asDynamic()(receiver, completion, true).facade\n\n@SinceKotlin(\"1.1\")\npublic fun <T> (suspend () -> T).createCoroutineUnchecked(\n        completion: Continuation<T>\n): Continuation<Unit> = this.asDynamic()(completion, true).facade\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\nimport kotlin.coroutines.experimental.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence of [IndexedValue] for each element of the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass though it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T: S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T: S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of pairs built from elements of both sequences with same indexes.\n * Resulting sequence has length of shortest input sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from elements of both collections with same indexes using provided [transform]. Resulting sequence has length of shortest input sequences.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return buildSequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n        StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n        StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n",null,null,null,null,null,"package kotlin.js\n\n@Deprecated(message = \"Use `definedExternally` instead\", level = DeprecationLevel.ERROR, replaceWith = ReplaceWith(\"definedExternally\"))\npublic external val noImpl: Nothing\n\n/**\n * The property that can be used as a placeholder for statements and values that are defined in JavaScript.\n *\n * This property can be used in two cases:\n *\n *   * To represent body of an external function. In most cases Kotlin does not require to provide bodies of external\n *     functions and properties, but if for some reason you want to (for example, due to limitation of your coding style guides),\n *     you should use `definedExternally`.\n *   * To represent value of default argument.\n *\n * There's two forms of using `definedExternally`:\n *\n *   1. `= definedExternally` (for functions, properties and parameters).\n *   2. `{ definedExternally }` (for functions and property getters/setters).\n *\n * This property can't be used from normal code.\n *\n * Examples:\n *\n * ``` kotlin\n * external fun foo(): String = definedExternally\n * external fun bar(x: Int) { definedExternally }\n * external fun baz(z: Any = definedExternally): Array<Any>\n * external val prop: Float = definedExternally\n * ```\n */\npublic external val definedExternally: Nothing\n\n/**\n * Exposes the JavaScript [eval function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) to Kotlin.\n */\npublic external fun eval(expr: String): dynamic\n\n/**\n * Exposes the JavaScript [undefined property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) to Kotlin.\n */\npublic external val undefined: Nothing?\n\n@Deprecated(\"Use toInt() instead.\", ReplaceWith(\"s.toInt()\"), level = DeprecationLevel.ERROR)\npublic external fun parseInt(s: String): Int\n\n@Deprecated(\"Use toInt(radix) instead.\", ReplaceWith(\"s.toInt(radix)\"), level = DeprecationLevel.ERROR)\npublic external fun parseInt(s: String, radix: Int = definedExternally): Int\n\n@Deprecated(\"Use toDouble() instead.\", ReplaceWith(\"s.toDouble()\"), level = DeprecationLevel.ERROR)\npublic external fun parseFloat(s: String, radix: Int = definedExternally): Double\n\n/**\n * Puts the given piece of a JavaScript code right into the calling function.\n * The compiler replaces call to `js(...)` code with the string constant provided as a parameter.\n *\n * Example:\n *\n * ``` kotlin\n * fun logToConsole(message: String): Unit {\n *     js(\"console.log(message)\")\n * }\n * ```\n *\n * @param code the piece of JavaScript code to put to the generated code.\n *        Must be a compile-time constant, otherwise compiler produces error message.\n *        You can safely refer to local variables of calling function (but not to local variables of outer functions),\n *        including parameters. You can't refer to functions, properties and classes by their short names.\n */\npublic external fun js(code: String): dynamic\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\ninternal inline fun deleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6CI,sB;MAAA,SAAkB,I;IAClB,sBAAW,MAAX,C;IAFA,4C;IAGA,yBACsD,0CAAgB,IAAhB,C;EALb,C;;;MAIzC,6B;IAAA,C;;;;MAEqE,mB;IAAA,C;;;IAWjE,mCAAsB,yCAAc,qBAAd,CAAtB,C;EACJ,C;;EAM8B,C;;IAG1B,c;EACJ,C;;EASsD,C;;IAGlD,4BAAe,kDAAf,C;EACJ,C;;EAK0C,C;;EAKyB,C;;IAO/C,Q;IAHhB,IAAI,4CAAJ,C;MACI,sCAAyB,KAAM,UAA/B,C;;MAEA,uBAAY,sEAAZ,C;;EACR,C;;;MAEiD,0B;IAAA,C;;;IAM7C,gCAAmB,KAAnB,EAA0B,sBAA1B,C;EACJ,C;;IAMI,gCAAmB,4BAAuB,SAAvB,CAAnB,EAAsD,sBAAtD,C;EACJ,C;;IAGI,yBAAyB,4BAAzB,EAAwC,SAAxC,C;EACJ,C;;IAGgC,Q;IAAA,yBAAR,YAAQ,C;IAAR,iB;MAAyB,OAAa,0C;;IAA1D,oBAAoB,I;IACpB,OAAO,MAAI,aAAJ,eAA4B,0C;EACvC,C;;IAeI,4B;IACA,qBAAM,KAAN,EAAa,IAAb,C;EACJ,C;;IAeI,4B;IACA,qBAAM,KAAN,EAAa,QAAb,EAAuB,IAAvB,C;EACJ,C;;IAQI,OAAM,gCAAmB,YAAnB,EAAiC,iBAAjC,EAAoD,OAApD,qE;EAAN,C;;IAIA,OAAM,oBAAO,KAAP,yD;EAAN,C;;;;;;EC1JR,uF;;ICUI,kB;IASA,4BACqC,U;IDVrC,IAAI,ECaQ,kBAAkB,kBDb1B,CAAJ,C;MACI,cCY2C,2B;MDX3C,MAAM,8BAAyB,OAAQ,WAAjC,C;;ECH2B,C;;;MAqBjC,Q;MAAA,U;MAAA,+C;QAAA,a;;QACsB,gBAAlB,sB;QAAyB,4BCgC3B,S;QDjCF,SCkCG,S;;MDlCH,a;IAAA,C;;;IDkFyC,MAAM,2BC/EK,wCD+EyB,WAA9B,C;EC/ED,C;;IAEhB,OAAE,yBAAF,SAAmB,cAAnB,M;EAAA,C;;;;;;;IAtBlC,gE;IAIuC,mCAAK,KAAL,EAAY,KAAZ,C;IAJvC,Y;EAAA,C;;IAsCA,kCAAuB,KAAvB,EAA8B,IAA9B,C;IAFA,gB;EADkB,C;;IAI0B,oCAAyB,4BAAzB,EAAuD,IAAvD,EAA6D,UAA7D,C;EAAA,C;;;;;;;IEjDhD,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAWI,kE;IAkBA,4D;IAWA,gE;IASA,4E;EAjDJ,C;;;IAWI,2B;IAAA,sC;EAAA,C;;;IAkBA,2B;IAAA,mC;EAAA,C;;;IAWA,2B;IAAA,qC;EAAA,C;;;IASA,2B;IAAA,2C;EAAA,C;;YAsBU,U;WACF,S;QAAgC,0BAAN,KAAM,EAA0B,UAA1B,C;QAAhC,K;WACA,Q;QAA+B,eAAN,KAAM,EAAe,UAAf,C;QAA/B,K;WACA,c;QAAqC,2BAAN,KAAM,EAA2B,UAA3B,C;QAArC,K;WACA,M;QAAA,K;;QAJJ,K;;EAAA,C;;YAgBM,U;WACF,S;QAAgC,4BAAN,KAAM,EAA0B,QAA1B,EAAoC,UAApC,C;QAAhC,K;WACA,Q;QAA+B,iBAAN,KAAM,EAAe,QAAf,EAAyB,UAAzB,C;QAA/B,K;WACA,c;QAAqC,6BAAN,KAAM,EAA2B,QAA3B,EAAqC,UAArC,C;QAArC,K;WACA,M;QAAA,K;;QAJJ,K;;EAAA,C;;;MAU+B,gBAAS,iC;IAAT,C;;;;;;;;IAjGvC,gK;EAAA,C;;;IAAA,a;MAAA,e;QAAA,2C;MAAA,Y;QAAA,wC;MAAA,c;QAAA,0C;MAAA,oB;QAAA,gD;MAAA,QAAA,mF;;EAAA,C;;;;ICGI,4B;IACA,gC;IAEA,gBAA2B,S;IAC3B,4BAAsC,C;EALC,C;;;MAKvC,gC;IAAA,C;;MAAA,sC;IAAA,C;;;IAGI,YAAY,a;IJyDhB,IAAI,EIxDM,UAAU,SJwDhB,CAAJ,C;MACI,cAdW,e;MAeX,MAAM,2BAAsB,OAAQ,WAA9B,C;;IIzDN,gBAAS,S;IACT,OAAO,K;EACX,C;;;MAGY,W;IAAA,C;;;IAGR,cAAc,iBAAa,Q;IAC3B,IAAI,eAAW,0BAAiB,OAAjB,CAAf,C;MACI,gBAAS,K;MACT,kBAAa,mB;MACb,eAAW,kBAAS,OAAT,EAAkB,IAAlB,C;;;MAuCM,Y;MACjB,iBAAa,cAtCM,KAsCN,C;;EArCrB,C;;IAGI,cAAc,iBAAa,Q;IAC3B,IAAI,eAAW,0BAAiB,OAAjB,CAAf,C;MACI,gBAAS,4BAAuB,SAAvB,C;MACT,kBAAa,mB;MACb,eAAW,kBAAS,OAAT,EAAkB,IAAlB,C;;;MAoCM,Y;MACjB,iBAAa,6BAnCmB,SAmCnB,C;;EAlCrB,C;4LAEA,yB;IAAA,oD;IAAA,wB;MAEI,cAAc,iBAAa,Q;MAC3B,IAAI,eAAW,0BAAiB,OAAjB,CAAf,C;QACI,gBAAS,K;QACT,kBAAa,6B;QACb,eAAW,kBAAS,OAAT,EAAkB,IAAlB,C;;;QAkBM,Y;QACjB,iBAAa,cAjBM,KAiBN,C;;IAhBrB,C;GATA,C;0NAWA,yB;IAAA,uG;IAAA,oD;IAAA,4B;MAEI,cAAc,iBAAa,Q;MAC3B,IAAI,eAAW,0BAAiB,OAAjB,CAAf,C;QACI,gBAAS,4BAAuB,SAAvB,C;QACT,kBAAa,6B;QACb,eAAW,kBAAS,OAAT,EAAkB,IAAlB,C;;;QAcM,Y;QACjB,iBAAa,6BAbmB,SAanB,C;;IAZrB,C;GATA,C;8LAWA,yB;IAAA,wB;MAEyB,Y;MACjB,iBAAa,oB;IAErB,C;GALA,C;4NAOA,yB;IAAA,4B;MAEyB,Y;MACjB,iBAAa,uC;IAErB,C;GALA,C;;IASI,cAAc,iBAAa,Q;IAC3B,gBAAS,K;IACT,kBAAa,gB;IACb,eAAW,kBAAS,OAAT,EAAkB,IAAlB,C;EACf,C;;IAGI,mCAAyB,eAAzB,UAAoD,cAAb,iBAAa,CAApD,M;EAAA,C;;;MA/EJ,gC;IAAA,C;;;;;;;;IAmFA,kBADiE,SACjE,0B;MA/CI,cAAc,sBAAa,Q;MAC3B,IAAI,oBAAW,0BAAiB,OAAjB,CAAf,C;QACI,qBA6CuC,K;QA5CvC,uBAAa,qC;QACb,oBAAW,kBAAS,OAAT,Y;;;QAkBM,iB;QACjB,sBAAa,cAwB0B,KAxB1B,C;;;;MAyBb,uBAAO,KAAP,C;EAFmD,C;;IAM3D,kBAD0F,SAC1F,0B;MAzCI,cAAc,sBAAa,Q;MAC3B,IAAI,oBAAW,0BAAiB,OAAjB,CAAf,C;QACI,qBAAS,4BAuC2C,SAvC3C,C;QACT,uBAAa,qC;QACb,oBAAW,kBAAS,OAAT,Y;;;QAcM,iB;QACjB,sBAAa,6BAsBuC,SAtBvC,C;;;;MAuBb,sCAAoB,SAApB,C;EAF4E,C;;IAMpF,kBAD4D,SAC5D,0B;MAA6B,sBAAa,cAAO,KAAP,C;;MAClC,uBAAO,KAAP,C;EAF8C,C;;IAMtD,kBADqF,SACrF,0B;MAA6B,sBAAa,6BAAoB,SAApB,C;;MAClC,sCAAoB,SAApB,C;EAFuE,C;;;;;MAU5C,uB;IAAA,C;;;IAM/B,Q;IAAA,6E;EAAA,C;;IAGC,gB;IAAD,QAAC,0EAAD,mC;EAAA,C;;IAImB,Q;;MAAf,eAAe,+E;MACf,mBAAmB,QAAS,a;MAC5B,cAAc,YAAa,Q;MAC3B,UAAyB,sBAAX,eAAW,CAAf,GAAkC,oBAAQ,qBAAR,CAAlC,GAAoD,I;MAC9D,YAAY,gB;MAER,IAAI,eAAe,CAAK,YAAxB,C;QACiB,yCAAwB,8BAAxB,C;;QAEb,gBAAgB,wC;QAChB,IAAI,iBAAJ,C;UACiB,yCAAoB,SAApB,C;;UAEA,0BAAO,uCAAP,C;;;;MAG3B,gC;QACE,MAAM,sBAAkB,kCAA+B,IAAjD,EAAwD,CAAxD,C;;;QAlBV,O;;EAoBJ,C;;;;;;;IAMsC,oB;MAAA,OAAY,gB;IAClD,cAAc,I;IACd,eAAe,SAAK,S;IACpB,IAAS,qBAAL,IAAK,CAAL,IAAyB,+CAAzB,IAAuE,sBAAL,IAAK,CAAL,KAAqC,sBAAX,oBAAW,CAA3G,C;MAEI,iBAAiB,QAAS,W;MAC1B,cAAc,QAAS,Q;MACvB,IAAI,UAAW,0BAAiB,OAAjB,CAAf,C;QACI,UAAW,kBAAS,OAAT,EAAkB,SAAlB,C;QACX,M;;;QAEA,UAAU,iB;;;IAIlB,YAAY,qB;IACZ,gBAAgB,uCAAqB,KAArB,C;IAChB,IAAI,iBAAJ,C;MACa,wBAAT,QAAS,EAAwB,SAAxB,EAAmC,OAAnC,C;;;MAEA,WAAT,QAAS,EAAW,sCAAoB,KAApB,CAAX,EAAuC,OAAvC,C;;EAEjB,C;;;;;;;ICxK2C,qBAAQ,gB;EAAR,C;;IACD,qBAAQ,mBAAR,IAA+B,cAAQ,gB;EAAvC,C;;IAGhC,IAIoB,I;YAJpB,K;WACF,C;QAAuB,uBAAO,KAAP,C;QAAvB,K;WACA,C;QAAoB,6BAAkB,KAAlB,C;QAApB,K;WACA,C;QAAe,wBAAa,KAAb,C;QAAf,K;WACA,C;QAAsD,YAAhC,2E;QDmDD,a;QACjB,kBAAa,cCpDwD,KDoDxD,C;QCpDjB,K;WACA,C;QAAA,K;cLgGyC,MAAM,2BAA8B,CK/F/D,kBAAe,IL+FgD,YAA9B,C;;EK7FvD,C;;IAGU,IAIoB,I;YAJpB,K;WACF,C;QAAuB,sCAAoB,SAApB,C;QAAvB,K;WACA,C;QAAoB,0CAA+B,SAA/B,C;QAApB,K;WACA,C;QAAe,qCAA0B,SAA1B,C;QAAf,K;WACA,C;QAAsD,YAAhC,2E;QD+CD,a;QACjB,kBAAa,6BChDqE,SDgDrE,C;QChDjB,K;WACA,C;QAAA,K;cLqFyC,MAAM,2BAA8B,CKpF/D,kBAAe,ILoFgD,YAA9B,C;;EKlFvD,C;;IC1BoB,oB;EAAD,C;;IACmB,kB;EAAA,C;;;;;;;ICGG,kBAArC,oCAAyB,UAAzB,CAAqC,EAAkB,IAAlB,C;EAArC,C;;IAO+C,kBAA/C,sCAAyB,QAAzB,EAAmC,UAAnC,CAA+C,EAAkB,IAAlB,C;EAA/C,C;;ICPY,UAOU,M;;MANlB,OCHE,UDGkC,UCHlC,EAA6B,KAA7B,C;;;MDIJ,gC;QACE,UAAW,6BAAoB,CAApB,C;QACX,M;;;QAJQ,O;;IAAZ,gB;IAMA,IAAI,UAAU,mBAAd,C;MACI,UAAW,cAAO,4EAAP,C;;EACnB,C;;IAOgB,UAOU,M;;MANlB,OCVE,UDUkC,QCVlC,EDU4C,UCV5C,EAAuC,KAAvC,C;;;MDWJ,gC;QACE,UAAW,6BAAoB,CAApB,C;QACX,M;;;QAJQ,O;;IAAZ,gB;IAMA,IAAI,UAAU,mBAAd,C;MACI,UAAW,cAAO,4EAAP,C;;EACnB,C;;IAWI,iC;IAkBa,gB;;MACT,OCvDE,iBAA6B,KAA7B,C;;;MDwDJ,gC;QACE,mCAAuB,CAAvB,C;;;QAHS,O;;IAAb,iB;IAMI,eAAW,mBAAX,C;MAAkC,4B;SAClC,yCAAmB,MAAnB,EAA2B,WAA3B,E;MACI,IAAI,6CAAJ,C;QAAsC,MAAM,MAAO,U;;QAAe,e;;MAE9D,4B;IA3BZ,a;EACJ,C;;IAWI,iC;IAKa,gB;;MACT,OC/CE,2BAAuC,KAAvC,C;;;MDgDJ,gC;QACE,mCAAuB,CAAvB,C;;;QAHS,O;;IAAb,iB;IAMI,eAAW,mBAAX,C;MAAkC,4B;SAClC,yCAAmB,MAAnB,EAA2B,WAA3B,E;MACI,IAAI,6CAAJ,C;QAAsC,MAAM,MAAO,U;;QAAe,e;;MAE9D,4B;IAdZ,a;EACJ,C;;IAGiB,UAKN,M;;MAJH,mB;;;MACF,gC;QACE,mCAAuB,CAAvB,C;;;QAHS,O;;IAAb,iB;IAMI,eAAW,mBAAX,C;MAAkC,4B;SAClC,yCAAmB,MAAnB,EAA2B,WAA3B,E;MACI,IAAI,6CAAJ,C;QAAsC,MAAM,MAAO,U;;QAAe,e;;MAE9D,4B;IALZ,a;EAOJ,C;;;;;IE5DI,sBAAW,IAAX,C;IAFA,kC;IACA,sC;IAEA,kBAAuB,S;EAJuB,C;;;MAC9C,8B;IAAA,C;;;;MACA,gC;IAAA,C;;;IAmBiC,yB;EAAA,C;;YAES,gB;WACtC,C;QAAe,kBAAW,S;QADM,OACK,I;WACrC,C;QAFgC,OAErB,K;cV8E8B,MAAM,2BU7EjC,mBV6E+D,WAA9B,C;;EUhFf,C;;YAMK,gB;WACrC,C;QAAe,kBAAW,O;QADK,OACI,I;WACnC,C;QAF+B,OAElB,K;cVwE4B,MAAM,2BUvEjC,iBVuE+D,WAA9B,C;;EU1EhB,C;;IAQ/B,IAAI,mBAAJ,C;MAAkB,OAAO,mB;IAEzB,YAAY,IAAK,c;IACjB,IAAI,4CAAJ,C;MAAqC,MAAM,KAAM,U;IACjD,OAAO,iCAAoB,KAApB,C;EACX,C;;IAGI,IAAI,kBAAJ,C;MAAiB,M;IAEjB,eAAS,IAAT,C;EACJ,C;;IAGI,kBAAW,KAAX,EAAkB,eAAlB,C;EAAA,C;;IAGA,kBAAW,4BAAuB,SAAvB,CAAX,EAA8C,eAA9C,C;EAAA,C;;IAIa,IAAN,I;IADP,YAAY,IAAK,c;IAEb,kBADS,KACT,yB;MAAiB,gCAAY,cAAZ,EAA4B,UAA5B,C;SACjB,kBAFS,KAET,a;MAEI,IAAI,yDAA4C,QAAA,cAAe,UAAf,EAA4B,KAAM,UAAlC,CAAhD,C;QACI,6BAAgB,cAAe,UAA/B,C;MACJ,M;;;MVuCiC,MAAM,2BAA8B,CUrC3D,uCAA2B,cAA3B,CVqC2D,YAA9B,C;;IU7C/C,W;EAUJ,C;;IAGI,yBAAyB,YAAzB,EAAkC,SAAlC,C;EACJ,C;;;;;;;IC7CI,uB;MAAA,UAA4B,iB;IAC5B,qB;MAAA,4C;IACA,sB;MAAA,SAAe,I;IAGnB,iBAAiB,oBAAoB,OAApB,EAA6B,MAA7B,C;IACjB,gBAAoB,KAAM,OAAV,GACZ,4BAAwB,UAAxB,EAAoC,KAApC,CADY,GAEZ,wBAAoB,UAApB,EAAyC,IAAzC,C;IACJ,SAAU,eAAM,KAAN,EAAa,SAAb,EAAwB,KAAxB,C;IACV,OAAO,S;EACX,C;;IAsBoC,uB;MAChC,iBAAiB,IAAK,Q;MAEtB,IAAI,oBAAY,UAAZ,KAA0B,4DAAuC,uBAAW,eAAQ,IAAnB,MAA4B,eAA7F,CAAJ,C;QACI,OAAU,aFnER,CEmEkD,IFnElD,EAA6B,KAA7B,C;;MEqEN,iBAAiB,wBAAa,eAAb,C;MAEjB,IAAI,eAAe,UAAnB,C;QACI,OAAU,aFxER,CEwEkD,IFxElD,EAA6B,KAA7B,C;;ME2EN,IAAI,8BAAW,2BAAX,GAAuC,uBAAW,2BAAX,CAAvC,CAAJ,C;QACI,sBAAsB,0BAAsB,UAAtB,EAAkC,IAAlC,C;QACtB,OAAU,aF7ER,CE6EkD,eF7ElD,EAA6B,KAA7B,C;;MEgFN,YAAQ,CAAC,aAAM,O;MX5Ef,IAAI,CAAC,KAAL,C;QACI,cW2EqB,oD;QX1ErB,MAAM,8BAAyB,OAAQ,WAAjC,C;;MW2EV,iBAAiB,kBACH,UADG,EAEF,IAFE,EAGI,qDAAJ,GAAoC,mBAApC,GAA6D,gBAH7D,C;MAIjB,UAAW,+BAAsB,uBAAW,qBAAX,CAAtB,C;MACX,6BAAM,aAAN,EAAa,UAAb,C;MAtBA,OAuBA,UAAW,Y;IAxBqB,C;EAAA,C;;IAFhC,qB;MAAA,4C;IAEG,OAAyB,yCAAzB,qB;EAAA,C;;IAgCH,6BAAwB,aAAxB,EAAuC,MAAvC,C;IAFI,oC;EAD8B,C;;IAIiB,oD;EAAA,C;;IAG/C,IAAI,6CAAJ,C;MAAsC,yBAAyB,oBAAzB,EAAwC,MAAO,UAA/C,C;EAC1C,C;;;;;;;IAMA,+BAAoB,aAApB,EAA4C,KAA5C,C;IADI,oB;EAF6B,C;;IAKvB,4BAAN,YAAM,EAA0B,IAA1B,EAAgC,IAAhC,C;EACV,C;;;;;;;IAIA,gC;IAEA,2BAAmB,Y;EAHkB,C;;;MACrC,6B;IAAA,C;;;IAEA,mD;EAAA,C;;IAAA,sE;EAAA,C;;;;;;;IAQA,gCAAwB,QAAxB,EAAkC,UAAlC,C;IAHA,gC;EAD6B,C;;;MAC7B,6B;IAAA,C;;;;;;;;;;ICtDsC,0B;MAAA,aAAmB,I;WAVzD,0G;EAAA,C;;IAsCyB,qB;MAAA,QAAoB,I;WAJ7C,+E;EAAA,C;;;;;;;IAiDA,oC;MAAA,uBAA8B,K;IAG9B,OAAyB,iEAAzB,qB;EAAA,C;sHAbJ,yB;IAAA,oD;IAAA,oG;;MAa6B,uB;QACrB,kBAAkB,qCAA4B,IAA5B,EAA+C,6BAA/C,C;QAClB,IAAI,CAAC,0BAAL,C;UAAyB,WAAY,qB;QACrC,cAAM,WAAN,C;QAFA,OAGA,WAAY,Y;MAJS,C;IAAA,C;IAb7B,8D;MAUI,oC;QAAA,uBAA8B,K;yBAGL,iE;MAAzB,yD;IAAA,C;GAbJ,C;;IA6BI,oC;MAAA,uBAA8B,K;IAG9B,OAAyB,uEAAzB,qB;EAAA,C;4HAZJ,yB;IAAA,oD;IAAA,oG;;MAY6B,uB;QACrB,kBAAkB,qCAA4B,IAA5B,EAA+C,gCAA/C,C;QAClB,IAAI,CAAC,0BAAL,C;UAAyB,WAAY,qB;QACrC,cAAM,WAAN,C;QAFA,OAGA,WAAY,Y;MAJS,C;IAAA,C;IAZ7B,8D;MASI,oC;QAAA,uBAA8B,K;yBAGL,uE;MAAzB,yD;IAAA,C;GAZJ,C;;IAyBI,gCAAwB,QAAxB,EAAkC,UAAlC,C;IACA,kBAC0C,I;EALE,C;;;MAQhC,Q;MAAA,U;MAAA,qC;QAAA,a;;QAAsC,gBAAzB,aAAS,QAAT,cAAmB,IAAnB,C;QAAgC,kBV1HnD,S;QU0HM,SVzHL,S;;MUyHK,a;IAAA,C;;;IAGR,mCAAsB,aAAS,QAAT,aAAiB,qBAAjB,CAAtB,C;EACJ,C;;;MAEuC,+B;IAAA,C;;;IAItB,IAAN,I;IADP,YAAY,IAAK,c;IAEb,kBADS,KACT,yB;MACI,aAAuB,kBAAJ,GAAwB,KAAxB,GACf,8BAA0B,UAA1B,EAAsC,KAAtC,EAA6C,KAA7C,C;MACJ,4BAAe,MAAf,C;MACA,Y;;UAEJ,kBAPS,KAOT,6B;MACI,IAAI,KAAM,iBAAN,KAA2B,UAA/B,C;QZrIZ,IAAI,EYsIkB,KAAM,OAAN,KAAiB,KZtInC,CAAJ,C;UACI,cYqI4C,uB;UZpI5C,MAAM,2BAAsB,OAAQ,WAA9B,C;;QYqIY,OAAN,KAAM,M;;;QAEN,W;;MAEA,W;IAdZ,W;EAgBJ,C;;IAIiB,IAAN,I;IADP,YAAY,IAAK,c;IAEb,kBADS,KACT,yB;MACI,4BAAe,4BAAuB,SAAvB,CAAf,C;MACA,Y;;;MAEI,W;IALZ,W;EAOJ,C;;IAGwB,Q;IAApB,iCAAoB,sEAApB,EAAyC,kBAAzC,EAAgD,eAAhD,C;EACJ,C;;IAGI,uCAAkC,KAAlC,EAA6D,IAA7D,EAA6E,OAA7E,C;EAAA,C;;IAGS,Q;IAAT,SAAS,yE;IACT,kBAAW,KAAX,EAAsB,wCAAmB,SAAvB,GAA6B,iBAA7B,GAAoD,eAAtE,C;EACJ,C;;IAGa,Q;IAAT,SAAS,yE;IACT,kBAAW,4BAAuB,SAAvB,CAAX,EAAkD,wCAAmB,SAAvB,GAA6B,iBAA7B,GAAoD,eAAlG,C;EACJ,C;;IAI4C,IAAM,IAAN,EAAuB,M;IAA/D,OAAI,+CAAJ,GAAwC,CAAM,OAAN,KAAM,OAAN,yDAAxC,GAA+D,4E;EAA/D,C;;IAGA,oCAAoC,cAAT,aAAS,CAApC,M;EAAA,C;;IAIA,OAAM,oBAAO,KAAP,mE;EAAN,C;;;;;;;IAIJ,wC;IACA,oB;IACA,kB;EAHmC,C;;IAKD,+CAA4B,WAA5B,O;EAAA,C;;;;;;;;;;;;;;IC9NI,sB;MAAA,SAAe,I;IAAgC,mCAAwB,MAAxB,C;EAAA,C;;IAMsB,gBAAjC,4BAA2B,IAA3B,C;IXQ1E,SWRmH,sB;IAAzC,OXSnE,S;EWTmE,C;;IAQ1E,sBAAW,IAAX,C;IACO,mCAAsB,MAAtB,C;EAH6B,C;;;MAIG,gC;IAAA,C;;;IAEN,Q;IAAA,2G;EAAA,C;;mBACjC,yC;QAAA,S;aAAA,Q;;aAAA,uB;EAAkC,C;;IAAlC,wC;IAAA,yB;IAAA,kB;EAAkC,C;;;;;;;;;;;;;YAAA,Q;YAAA,gB;4BAAA,sC;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,qF;;;;;;;;;;;;;;EAAA,C;;IAG9B,mCAAe,KAAf,C;EAAA,C;;IAGA,mCAAe,4BAAuB,SAAvB,CAAf,C;EAAA,C;;;;;;;IC3DR,0B;IAWkC,8B;EAXlC,C;;IAY+E,Y;EAAA,C;;IACA,MAAM,oC;EAAgC,C;;IAC/E,mB;EAAA,C;;;;;;;;IAdtC,iC;MAAA,gB;;IAAA,0B;EAAA,C;;;;IA2C0D,sB;MAAA,SAAe,I;IACrE,SAAa,cAAJ,GAAoB,OAApB,GAAiC,qBAAU,MAAV,C;IAC1C,OAAW,YAAY,iBAAZ,IAAiC,oBAAQ,2BAAR,SAArC,GACH,gBAAK,iBAAL,CADG,GACyB,E;EACpC,C;;IAGoG,c;EAAA,C;;IACtC,2B;EAAA,C;;IACM,W;EAAA,C;;ICrChE,2CAAgC,2BAAhC,C;EAD6C,C;;IAiCiC,W;EAAA,C;;IAW1E,kCAAuB,IAAvB,EAA6B,YAA7B,C;EAAA,C;;;;;;;;;;;;;;IC9CJ,UAOA,M;IAPA,gCAAQ,2CAAR,W;MACO,gD;MACH,M;;IAGJ,IAAI,+CAAJ,C;MAAwC,M;IAExC,8BAAQ,qBAAR,mCAAqB,SAArB,Q;IAEA,OAAQ,OAAM,SAAN,C;EACZ,C;;IAeI,2C;;;IAAA,6C;EAAA,C;;;;;;;;IAAA,oD;MAAA,mC;;IAAA,6C;EAAA,C;;;;;;sJAYJ,yB;IAAA,2G;IAAA,kC;IAAA,2F;IAAA,4G;IAAA,uG;;MAMI,sC;MAAQ,+C;IANZ,C;IAAA,0G;MAQY,oBAAQ,CAAO,OAAP,EAAgB,SAAhB,C;IAAR,C;IARZ;;;K;IAAA,0B;MAMI,4DAAwC,6BAAxC,C;IAAA,C;GANJ,C;;;;;;;;;ICpDoE,Q;IAAZ,QAAY,sCAAZ,SAAY,YAAZ,mBAA0B,S;EAA1B,C;;;;;;;;;ICgIpD,uB;MAAA,UAA4B,iB;IAC5B,qB;MAAA,4C;IACA,sB;MAAA,SAAe,I;IAGf,iBAAiB,oBAAoB,OAApB,EAA6B,MAA7B,C;IACjB,gBAAoB,KAAM,OAAV,GACZ,0BAAsB,UAAtB,EAAkC,KAAlC,CADY,GAEZ,sBAAqB,UAArB,EAA0C,IAA1C,C;IACJ,SAAU,eAAM,KAAN,EAAa,SAAb,EAAwB,KAAxB,C;IACV,OAAO,S;EACX,C;;IAMI,6BAAqB,aAArB,EAAoC,MAApC,C;EAHmC,C;;IAIF,Q;IAAA,2G;EAAA,C;;mBACjC,2C;QAAA,S;aAAA,Q;;aAAA,uB;EAAkC,C;;IAAlC,wC;IAAA,yB;IAAA,kB;EAAkC,C;;;;;;;;;;;;;YAAA,Q;YAAA,gB;4BAAA,sC;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,qF;;;;;;;;;;;;;;EAAA,C;;;;;;;IAMlC,6BAAqB,aAArB,EAA6C,KAA7C,C;IADA,oB;EAFkC,C;;IAKxB,4BAAN,YAAM,EAA0B,IAA1B,EAAgC,IAAhC,C;EACV,C;;;;;;;;;;;;;;IC1GuC,uB;MACtB,UAAb,IAAK,QAAQ,CAAM,kCAAyB,YAAzB,EAA+B,IAA/B,C;MACvB,W;IAFuC,C;EAAA,C;;IPmGd,uB;MACrB,kBAAkB,gCAA4B,IAA5B,EAA+C,qCAA/C,C;MAClB,IAAI,CAAC,0BAAL,C;QAAyB,WAAY,qB;MACrC,cAAM,WAAN,C;MAFA,OAGA,WAAY,Y;IAJS,C;EAAA,C;;IZ1IzB,IAAI,EmBqCW,QAAQ,CnBrCnB,CAAJ,C;MACI,cmBoCwB,4C;MnBnCxB,MAAM,8BAAyB,OAAQ,WAAjC,C;;ImBoCV,IAAI,QAAQ,CAAZ,C;MAAe,M;IACf,OPmGyB,mCAHK,KAGL,EOnGU,kBPmGV,COnGzB,qB;EAGJ,C;;IAII,UAA2C,MAA3C,Q;IAAA,4DAAI,2BAAJ,4CAA2C,sE;EAA3C,C;;0BCnDyB,UAAR,OAAQ,EAAU,KAAV,C;IADzB,4B;;EAF2C,C;;;MAE3C,2B;IAAA,C;;;;;;;;+BAGuG,O;;EAA5D,C;;;;;;;IAc3C,iCAA8B,UAAR,OAAQ,EAAU,KAAV,CAA9B,C;IALA,4B;IACA,c;;EAHyC,C;;;MAEzC,2B;IAAA,C;;;IAMkC,OAAS,mDAAT,cAA2B,Q;EAA3B,C;;IAE9B,iBAAU,IAAV,KACI,kDAAqC,OAAA,KAAM,QAAN,EAAiB,YAAjB,CAArC,IAAiE,OAAA,KAAM,IAAN,EAAa,QAAb,CAAjE,IAAqF,OAAA,KAAM,MAAN,EAAe,UAAf,CADzF,C;EAAA,C;;IAGqD,gB;IAArD,SAAC,CAAU,SAAV,2BAAU,CAAV,GAAuB,EAAvB,QAAgC,SAAJ,QAAI,CAAhC,IAAD,IAA+C,EAA/C,SAAqD,kFAAqB,CAA1E,K;EAAA,C;;;;;;;IAUJ,iCAAsB,OAAtB,C;IADA,kC;;EAF6C,C;;;;;;;IAI7C,sE;IAG6C,yCAAK,OAAL,EAAc,IAAd,C;IAH7C,Y;EAAA,C;;IAU+B,wCAA6B,2BAAwB,IAArD,EAA4D,SAA5D,C;EAAA,C;;0BAEsF,UAAR,OAAQ,EAAU,KAAV,C;;EAAjF,C;;;;;;;IAIpC,kCAA8B,UAAR,OAAQ,EAAU,KAAV,CAA9B,C;EAAA,C;;IAGA,OAAI,aAAJ,GAAmB,SAAnB,GAA+B,SAAF,6BAAmB,KAAnB,C;EAA7B,C;;ICvD4B,8B;EAAhC,C;;IAEmB,mB;MAAE,aAAM,M;MAAM,W;IAAd,C;EAAA,C;;IAAX,WAAW,qCAAX,EAA4B,CAA5B,C;EACJ,C;;IAGe,mB;MAAE,eAAK,oB;MnB+Bf,QmB/B+B,iDAAmB,IAAnB,C;MAA2B,W;IAAlD,C;EAAA,C;;IAAX,WAAW,kEAAX,EAAqE,cAAL,IAAK,EAAc,CAAd,CAArE,C;EACJ,C;;IAG4B,mB;MAAE,aAAM,M;MAAM,W;IAAd,C;EAAA,C;;IACjB,oC;EAAA,C;;IAEC,aAAa,mBAAb,C;EACJ,C;;;;;;IAJJ,aAAa,WAAW,4CAAX,EAAiC,cAAL,IAAK,EAAc,CAAd,CAAjC,C;IACb,+D;EAKJ,C;;;;;;;IAG0D,8B;IAA9B,wB;IAC5B,qBAA0B,mB;IAE1B,6D;IAOI,aAAO,kBAAiB,SAAjB,EAA4B,kCAA5B,EAKJ,IALI,C;EAVgB,C;;IAmBvB,YAAM,iBAAQ,KAAR,C;EACV,C;;IAGsB,mB;MAAE,eAAK,oB;MnBLtB,QmBKsC,mDAAmB,IAAnB,C;MAA2B,W;IAAlD,C;EAAA,C;;IAAlB,aAAO,YAAW,oEAAX,EAAqE,cAAL,IAAK,EAAc,CAAd,CAArE,C;EACX,C;;IAGmC,mB;MAAE,aAAM,M;MAAM,W;IAAd,C;EAAA,C;;IACxB,kD;IAAA,oC;EAAA,C;;IAEC,mCAAO,cAAa,mBAAb,C;EACX,C;;;;;;IAJJ,aAAa,aAAO,YAAW,8CAAX,EAAiC,cAAL,IAAK,EAAc,CAAd,CAAjC,C;IACpB,uE;EAKJ,C;;IA9BoB,kD;IAAS,uB;EAAT,C;;IAEZ,mCAAO,aAAY,wCAAZ,EAAyB,GAAzB,C;EACX,C;;;;;;IAImC,wB;MAC/B,IAAI,KAAM,OAAN,IAAgB,8BAAhB,IAA0B,KAAM,KAAN,IAAc,mCAA5C,C;QACI,KAAM,kB;QACN,6BAAM,U;;MAEd,W;IALmC,C;EAAA,C;;;;;;;IA0BJ,gB;IACnC,kBAAiB,E;IAEjB,mBAAwB,K;EAH5B,C;;IAQQ,iBAAI,OAAJ,C;IACA,IAAI,CAAC,gBAAL,C;MACI,mBAAY,I;MACZ,e;;EAER,C;;;MnByCiB,Q;MAAA,OmBpCF,enBoCE,GAAQ,CAAR,I;MAAjB,iBAAc,CAAd,yB;QmBnC0B,U;QAAA,oB;QAAA,mB;UAAU,M;;QAAxB,cAAc,M;QACd,OAAQ,M;;;;MAGZ,IAAI,YAAJ,C;QACI,mBAAY,K;;;QAEZ,e;;;EAGZ,C;;;;;;;IAIA,eAAoB,gBAAmB,CAAnB,O;IACpB,cAAmB,C;IACnB,cAAmB,C;EAHvB,C;;;MAKwB,uBAAQ,W;IAAR,C;;;IAQT,Q;IALP,IAAI,YAAJ,C;MAAa,OAAO,I;IACpB,aAAa,2BAAM,WAAN,E;IACb,aAAM,WAAN,IAAc,I;IACd,cAAY,YAAL,WAAK,C;IAEZ,OAAO,qD;EACX,C;;IAGI,cAAmB,YAAL,WAAK,C;IACnB,IAAI,YAAW,WAAf,C;MACI,e;MACA,iBAAI,OAAJ,C;MACA,M;;IAEJ,aAAM,WAAN,IAAc,O;IACd,cAAO,O;EACX,C;;IAOU,Q;IAJN,QAAQ,W;IACR,QAAQ,C;IACR,QAAQ,gBAAmB,YAAM,OAAN,GAAa,CAAb,IAAnB,O;IACR,OAAO,MAAK,WAAZ,C;MACI,EAAE,QAAF,EAAE,gBAAF,UAAS,aAAM,CAAN,C;MACT,IAAM,YAAF,CAAE,C;;IAEV,eAAQ,C;IACR,cAAO,C;IACP,cAAO,C;EACX,C;;IAGI,QAAQ,YAAO,CAAP,I;IACR,OAAW,MAAK,YAAM,OAAf,GAAqB,CAArB,GAA4B,C;EACvC,C;;;;;;;ICkGA,qB;;;IA3GyB,qB;MAAA,QAAoB,I;WAV7C,+E;EAAA,C;;IAiHI,4B;MAAA,eAAwB,K;IACxB,iC;MAAA,oBAA6B,I;WAnCjC,iK;EAAA,C;;IAsCA,uB;EAAA,C;;;;;;;;IAAA,8B;MAAA,a;;IAAA,uB;EAAA,C;;;;;;;IAWkB,sB;MAAA,SAAe,I;IAAa,mBAAQ,MAAR,C;EAAA,C;;;;;;;;;IAoBR,qB;MAAA,QAAoB,I;IAC1D,gB;IAAA,+CAAK,qBAAL,iCAAkB,KAAlB,6BAA4B,K;EAA5B,C;;IAO8C,qB;MAAA,QAAoB,I;IAClE,Q;IAAA,8BAAK,qBAAL,qCAA0B,KAA1B,e;EACJ,C;;IAauB,qB;MAAE,cAAO,U;MAAU,W;IAAnB,C;EAAA,C;;IAAnB,4DAAmB,kCAAnB,C;EAAA,C;;IAiBA,0B;IACA,OAAO,4B;EACX,C;;IAMqC,qB;MAAA,QAAoB,I;ICqqBrC,Q;IAAA,ODpqBhB,kBCoqBgB,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,ODpqBP,sB;;EAC1B,C;;mBAEA,uD;QAAA,S;aAAA,Q;;aAAA,uB;EAOA,C;;IAPA,wC;IAAA,yB;IAAA,wB;IAAA,kC;EAOA,C;;;;;;;;;;;;;YC0pBoB,kBD3pBhB,6BC2pBgB,W;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;;YAAgB,oC;YD3pBM,gB;4BC2pBO,OD3pBP,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;YC2pBtB,gB;;;;;;;;;;;;;;;;;ED1pBJ,C;;IAEA,mC;EAAA,C;;EAKmC,C;;IAGG,4B;EAAA,C;;;;;;;;IARtC,0C;MAAA,yB;;IAAA,mC;EAAA,C;;IA2BI,+BAK+B,MAAJ,GAAY,WAAZ,GAA6B,Q;IAGxD,sBAA8C,I;EAXZ,C;;;MAC8B,4B;IAAA,C;;;;MAEhE,mC;IAAA,C;;MAAA,oC;IAAA,C;;;ItBvRA,IAAI,EsBySM,2BtBzSN,CAAJ,C;MACI,csBwS8B,+B;MtBvS9B,MAAM,2BAAsB,OAAQ,WAA9B,C;;IsBwSN,IAAI,cAAJ,C;MACI,sBAAe,iC;MACf,M;;IAEJ,MAAO,Q;IACP,aACa,MAAO,qBAAY,IAAZ,C;IACpB,sBAAe,M;IAEf,IAAI,gBAAJ,C;MACI,MAAO,U;MACP,sBAAe,iC;;EAEvB,C;;;MAKI,YAAY,IAAK,c;MACjB,OAAO,+CAAuB,KAAM,S;IACxC,C;;;;MAE8D,gE;IAAA,C;;;;MAG1D,YAAY,IAAK,c;MACjB,OAAO,oCAAuB,8CAAsB,KAAM,UAAN,QAA7C,C;IACX,C;;;IASgB,IAAK,I;IAAjB,YAAY,cAAK,OAAL,IAAK,cAAL,4C;IACZ,aAAa,4BAAqB,KAArB,EAA4B,cAA5B,C;IACb,4BAAe,MAAf,C;IACA,iCAAoB,KAApB,EAA2B,MAA3B,EAAmC,IAAnC,C;EACJ,C;;IAMI,Q;ItBpZJ,IAAI,CsBiZQ,6CtBjZZ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IsBgZN,qBAAa,M;IAEb,yC;MACO,c;MACH,sBAAe,iC;;EAEvB,C;;IAMI,OAAI,+CAAuB,MAAO,UAAP,QAAvB,IAAmD,CAAC,kCAA2B,MAAO,UAAlC,EAA6C,cAA7C,CAAxD,GACI,uBAAgB,MAAO,UAAvB,EAAkC,cAAlC,CADJ,GAC2D,c;EAD3D,C;;IAIA,IAAI,yCAAJ,C;MAAkC,OAAO,K;IAEzC,OAAO,OAAA,cAAe,MAAf,EAAwB,SAAU,MAAlC,MACC,cAAA,cAAe,MAAf,+BAAoD,SAAU,MAAV,QADrD,C;EAEX,C;;IAGI,IAAI,sDAAJ,C;MAA+C,OAAO,S;IACtD,gBAAgB,cAAe,U;IAC/B,IAAI,OAAA,SAAU,UAAV,EAAuB,SAAvB,CAAJ,C;MAAsC,OAAO,S;IAE7C,OAAO,cAAU,IAAV,EAAgB,SAAhB,C;EACX,C;;IAOwB,UAaT,M;IAbX,oBAAoB,kE;IAEpB,IAAI,CAAQ,wBAAP,MAAO,CAAZ,C;MAA0B,oCAAuB,aAAvB,C;IAC1B,kCAAqB,MAArB,EAA6B,IAA7B,C;IAEA,YAAY,kD;IACZ,IAAI,8BAAJ,C;;QAEQ,MAAO,gBAAO,KAAP,C;;;QACT,iC;UACE,6BAAgB,+BAA2B,qCAAkC,MAAlC,aAA8C,IAAzE,EAAgF,EAAhF,CAAhB,C;;;UAHJ,Q;;;;MAMA,CAAO,SAAP,MAAO,KAAP,6CAA8B,KAA9B,e;;EAER,C;0CAEA,yB;IE1aA,0B;IF0aA,wC;MAWI,Q;MAVA,oBAA4B,IAA5B,C;MEvaA,UFwaA,IExagB,K;MAChB,OAAO,aFuaP,IEvaO,CAAP,C;QACI,IAAI,QAAJ,C;UAAc,WAAM,G;;;YFwahB,IAAK,sB;;;YACP,iC;cACE,6D;;gBACI,cAAa,+BAA2B,0DAA3B,K;;;;cAJrB,Q;;;QEtaA,MAAM,GAAI,K;;MF8ad,iC;QAAiB,kC;;IACrB,C;GAZA,C;;IAWI,Q;IAVA,oBAA4B,IAA5B,C;IEvaA,UFqb+B,SErbf,K;IAChB,OAAO,aFobwB,SEpbxB,CAAP,C;MACI,IAAI,2BAAJ,C;QAAc,WAAM,G;;;UFwahB,IAAK,gBAWwB,KAXxB,C;;;UACP,iC;YACE,6D;;cACI,cAAa,+BAA2B,0DAA3B,K;;;;YAJrB,Q;;;MEtaA,MAAM,GAAI,K;;IF8ad,iC;MAAiB,kC;;EAIb,C;;IAJJ,Q;IAVA,oBAA4B,IAA5B,C;IEvaA,UFwb2C,IExb3B,K;IAChB,OAAO,aFuboC,IEvbpC,CAAP,C;MACI,IAAI,uCAAJ,C;QAAc,WAAM,G;;;UFwahB,IAAK,gBAcoC,KAdpC,C;;;UACP,iC;YACE,6D;;cACI,cAAa,+BAA2B,0DAA3B,K;;;;YAJrB,Q;;;MEtaA,MAAM,GAAI,K;;IF8ad,iC;MAAiB,kC;;EAOb,C;;IAGJ,YAAY,IAAK,c;IAEb,kBADE,KACF,S;MACI,IAAI,KAAM,SAAV,C;QAAoB,OAAO,K;MAC3B,qBAAa,W;MACb,sB;MACA,OAAO,I;;UAEX,kBAPE,KAOF,uB;MAC8B,gBAAnB,KAAM,a;MACT,IpBhbV,SoBgbU,C;QAAY,sB;MADhB,OpB9aL,S;;;MoBkbS,OAAO,K;EAEvB,C;;EAM4C,C;;IAIjC,Q;IADP,YAAY,IAAK,c;IAEb,kDAAsB,KAAM,UAAN,QAAtB,C;MAC8B,sCAA1B,KAAM,UAAU,UAAU,EAAwB,wBAAxB,C;SAC9B,gD;MtBjZqC,MAAM,2BAA8B,CsBkZ/D,6CAA0C,ItBlZqB,YAA9B,C;;UsBmZ3C,iD;MACoB,sCAAhB,KAAM,UAAU,EAAwB,gBAAxB,C;;MACZ,oCAAyB,4BAAzB,EAAuD,IAAvD,EAA6D,IAA7D,C;IAPZ,W;EASJ,C;;IAGQ,gB;IAAA,0GAAkC,6BAAyB,OAAzB,EAAkC,SAAlC,EAAwC,IAAxC,C;EAAlC,C;;IAWG,Q;IADP,YAAY,IAAK,c;IAEb,kDAAsB,KAAM,UAAN,QAAtB,C;MAAiE,OAAhB,KAAM,UAAU,M;SACjE,gD;MtBvaqC,MAAM,2BsBuad,wCtBva4C,WAA9B,C;;UsBwa3C,iD;MAAyC,OAAN,KAAM,M;;MACjC,W;IAJZ,W;EAMJ,C;;IAII,0BAAY,YAAZ,EAA0B,iBAA1B,EAA6C,gBAAS,OAAT,EAAkB,YAAlB,CAA7C,C;EAAA,C;;IASU,IAY8B,IAZ9B,EA0BsC,MA1BtC,EA0BsC,M;IA5BhD,OAAO,IAAP,C;MACI,YAAY,IAAK,c;MAEb,kBADE,KACF,S;QACI,IAAI,KAAM,SAAV,C;UAEI,qBAAa,I;UACb,OAAO,I;;;UAEP,8BAAuB,KAAvB,C;WAER,kBATE,KASF,yB;QACI,WAAW,KAAM,K;QACjB,IAAI,YAAJ,C;UACI,+BAAwB,wDAAxB,C;;;UAEA,IAAI,8CAAsB,KAAM,UAAN,QAAtB,IAAiD,YAArD,C;YtBhfpB,IAAI,EsBkf0B,sBAAgB,wBtBlf1C,CAAJ,C;cACI,cAdW,e;cAeX,MAAM,2BAAsB,OAAQ,WAA9B,C;;YsBkfc,IAAI,iBAAJ,C;cAAuB,IAAK,gBAAO,KAAM,UAAU,MAAvB,C;YAC5B,OAAO,iC;;UAEX,IAAK,iBAAQ,IAAR,C;UACL,OAAO,I;;;;QAIX,IAAI,iBAAJ,C;UAAuB,IAAK,gBAAO,CAAC,8EAAD,+BAAP,C;;QAC5B,OAAO,iC;;;EAIvB,C;;IAGI,yBAAyB,sBAAgB,wB;IACzC,OAAW,gBAAgB,kBAApB,GACH,yBAAqB,IAArB,EAA2B,OAA3B,CADG,GAGH,uBAAmB,IAAnB,EAAyB,OAAzB,C;EACR,C;;ItBzgBA,IAAI,EsB6gBM,UAAU,IAAK,ctB7gBrB,CAAJ,C;MACI,csB4gB8B,sB;MtB3gB9B,MAAM,2BAAsB,OAAQ,WAA9B,C;;IsB6gBN,qBAAa,wBAAS,KAAM,SAAf,C;EACjB,C;;ItBhhBA,IAAI,EsBmhBM,UAAU,IAAK,ctBnhBrB,CAAJ,C;MACI,csBkhB8B,uB;MtBjhB9B,MAAM,2BAAsB,OAAQ,WAA9B,C;;IsBmhBN,WAAW,wBAAoB,IAApB,C;IACX,IAAK,iBAAQ,KAAR,C;IACL,qBAAa,I;EACjB,C;;IAKyB,gBAAb,IAAK,QAAQ,C;IAEjB,W;EAAA,C;;mBALR,wC;QAAA,S;aAAA,Q;;aAAA,uB;EAQA,C;;IARA,wC;IAAA,yB;IAAA,kB;EAQA,C;;;;;;;;;;;;;YAPI,IAAI,CAAC,2BAAL,C;;8BACoC,sB;;;;;;cADpC,gB;;;;;;;YACI,OAAO,a;;YAKJ,gB;4BAAA,8B;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAP,OAAO,a;;;;;;;;;;;;;;EACX,C;;IAGI,IAAI,yDAAJ,C;MAA0B,OAAO,K;IACjC,Y;IACA,OAAO,I;EACX,C;;IAGoC,qB;MAAE,YAAK,cAAO,IAAP,C;MAAa,W;IAApB,C;EAAA,C;;IACR,qB;MAAE,cAAO,U;MAAU,W;IAAnB,C;EAAA,C;;IAF0C,uB;MAClE,aAAa,2DAAmB,0CAAnB,C;MACb,IAAK,4BAAmB,8CAAnB,C;MACT,W;IAHsE,C;EAAA,C;;IV5d7C,uB;MACrB,kBAAkB,gCAA4B,IAA5B,EAA+C,qCAA/C,C;MAClB,IAAI,CAAC,0BAAL,C;QAAyB,WAAY,qB;MACrC,cAAM,WAAN,C;MAFA,OAGA,WAAY,Y;IAJS,C;EAAA,C;;IU4dW,OV5dX,qCAHK,KAGL,EU4d6C,mCV5d7C,CU4dW,qB;EAAA,C;;IAOhC,YAAY,IAAK,c;IAEb,kBADE,KACF,W;MACI,IAAI,UAAU,IAAd,C;QAAoB,M;MAEpB,qBAAa,W;;UAEjB,kBANE,KAMF,yB;MAEI,IAAI,KAAM,KAAN,QAAJ,C;QAAwB,IAAK,S;EAGzC,C;;;MAE6C,gC;IAAA,C;;;YAEyB,kB;WAClE,C;QAD4D,OAChC,qBAAc,KAAd,C;WAC5B,C;QAF4D,OAE/B,sBAAe,KAAf,C;WAC7B,C;QAH4D,OAG/B,8BAAuB,KAAvB,C;ctB1hBY,MAAM,2BAA8B,CsB2hB/D,0BAAuB,iBtB3hBwC,YAA9B,C;;EsBuhBa,C;;IAU5D,yBAAY,cAAU,IAAV,EAAgB,KAAhB,CAAZ,EAA2C,mBAA3C,C;EAAA,C;;IAIA,IAAI,yDAAJ,C;MAA0B,OAAO,K;IACjC,4BAAqB,KAArB,C;IACA,OAAO,I;EACX,C;;IAII,OAAO,IAAP,C;MACI,YAAY,IAAK,c;MAEb,kBADE,KACF,S;QACI,IAAI,KAAM,SAAV,C;UACI,8BAAuB,KAAvB,C;;;UAIA,4BAAqB,KAArB,C;UACA,OAAO,I;;YAGf,kBAXE,KAWF,W;QACI,+BAAwB,KAAxB,C;WAEJ,kBAdE,KAcF,uB;QACI,IAAI,KAAM,SAAV,C;UACI,0BAAmB,KAAM,KAAzB,EAA+B,KAA/B,C;UACA,OAAO,I;;;UAGP,4BAAqB,KAArB,C;UACA,OAAO,I;;YAGf,kBAxBE,KAwBF,wB;QACI,IAAI,KAAM,UAAN,QAAJ,C;UAA6B,OAAO,K;QACpC,0BAAmB,KAAM,KAAzB,EAA+B,KAA/B,C;QACA,OAAO,I;;;QAGP,OAAO,K;;;EAIvB,C;;IAII,gBAAgB,cAAU,IAAV,EAAgB,KAAhB,C;IAChB,qBAAQ,yBAAU,IAAV,EAAgB,SAAhB,EAA2B,KAA3B,C;IACR,iCAAoB,SAApB,C;IACA,oCAAuB,SAAvB,C;IACA,0BAAmB,IAAnB,EAAyB,KAAzB,C;EACJ,C;;IAGI,mCAAe,cAAU,IAAV,EAAgB,KAAhB,CAAf,C;EAAA,C;;IAII,IADE,8BAAuB,cAAvB,EAA8C,mBAA9C,CACF,mC;MADJ,OACqC,K;;MADrC,OAEY,I;EAFZ,C;;YAcM,8BAAuB,cAAvB,EAAuC,IAAvC,E;WACF,C;QADJ,OAC4B,I;WACxB,C;QAFJ,OAEmC,K;cACvB,MAAM,wBAAsB,SAAM,IAAN,6CAChC,0CAA8B,cAA9B,CADgC,CAAtB,EACoD,2BAAf,cAAe,CADpD,C;;EAHlB,C;;IAgBQ,UADgB,MAChB,EAOa,MAPb,EAuB8B,MAvB9B,EAuB8B,M;UA/BhC,OAAO,IAAP,C;MACF,YAAY,IAAK,c;MAEjB,IAAI,4CAAJ,C;QACI,OAAO,6B;MACX,IAAI,8CAAsB,KAAM,WAAhC,C;QACI,OAAO,6B;MACS,2BAAW,KAAX,C;MAAA,mB;QAEZ,mDAAuB,mCAAsB,cAAtB,CAAvB,C;UAAgE,W;;UAE5D,yBAAY,cAAZ,EAA4B,IAA5B,C;UACA,OAAO,oB;;QALC,M;;MAApB,YAAoB,M;MAQH,SAAN,KAAM,K;MAAN,mB;QAEH,kBADE,KACF,S;UACI,8BAAuB,KAAvB,C;UACA,a;;cAEJ,kBALE,KAKF,W;UACI,+BAAwB,KAAxB,C;UACA,a;;;UtB5oByB,MAAM,2BAA8B,CsB8oBnD,mDAAuC,KAAvC,CtB9oBmD,YAA9B,C;;;MsBooB3C,WAAW,M;MAaX,IAAI,qDAAJ,C;QACI,sDAA8B,cAAe,UAA7C,e;MAEJ,iBAAiB,yBAAU,IAAV,EAAgB,CAAC,4EAAD,mCAAhB,EAAkD,IAAlD,C;MACjB,qBAAa,U;MACb,IAAI,2CAAJ,C;QAAyB,iCAAoB,cAApB,C;MACzB,IAAI,iBAAiB,uBAAgB,KAAhB,EAAuB,cAAvB,CAArB,C;QACI,OAAO,2B;MACX,yBAAY,cAAZ,EAAmC,mBAAnC,C;MACA,OAAO,oB;;EAEf,C;;IAII,Q;IADA,kBAAS,gBAAO,6BAAyB,mDAAzB,EAA8E,KAA9E,EAAqF,kBAArF,CAAP,C;IACT,oFAAoC,KAApC,e;EACJ,C;;IAGa,gB;IAAD,QAAC,8EAAD,mC;EAAA,C;;IAGR,UAAyB,MAAzB,Q;IAAA,sFAAmB,CAAM,SAAN,KAAM,KAAN,2C;EAAnB,C;;IAI0E,qB;MACtE,2CAAmB,aAAnB,EAA0B,sBAA1B,C;MACJ,W;IAF0E,C;EAAA,C;;IAIpD,Q;IAJtB,aAAa,KAAM,SAAS,oCAAuC,KAAvC,EAA8C,8DAA9C,C;IAG5B,IAAI,WAAW,iCAAf,C;MAAoC,OAAO,I;IACrB,wBAAN,KAAM,C;IAAN,iB;MAAqB,OAAO,K;;IAA5C,gBAAgB,I;IAChB,OAAO,uBAAgB,SAAhB,EAA2B,cAA3B,C;EACX,C;;IAGI,YAAY,IAAK,c;IAEjB,IAAI,2CAAJ,C;MACI,MAAM,wBAAsB,SAAM,IAAN,mEAA6D,cAA7D,CAAtB,EAAmH,2BAAf,cAAe,CAAnH,C;IAEV,gBAA0B,iBAAV,SAAU,C;IAE1B,IAAI,qBAAqB,uBAAgB,SAAhB,EAA2B,cAA3B,CAAzB,C;MAAqE,M;IAErE,yBAAY,cAAZ,EAAmC,mBAAnC,C;EACJ,C;;IAGI,UAAU,S;IACV,OAAO,GAAI,UAAX,C;MAAsB,MAAM,GAAI,K;IAChC,OAAO,IAAP,C;MACI,MAAM,GAAI,K;MACV,IAAI,yBAAJ,C;QAAkB,OAAO,G;MACzB,IAAI,uCAAJ,C;QAAqB,OAAO,I;;EAEpC,C;;IAEoF,yD;qBAAA,6G;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,8C;IAAA,wB;IAAA,0B;IAAA,uB;IAAA,kC;EAQpF,C;;;;;;;;;;;;;YAPI,YAAY,0BAAgB,c;YAExB,kBADE,KACF,S;cAAY,gB;8BAAA,iCAAM,KAAM,SAAZ,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cACZ,kBAFE,KAEF,yB;gBAAiB,KAAM,kBAAN,KAAM,KAAN,U;mCEpxBL,oB;kBAChB,gB;;;;kBFmxBqB,wB;kBAAA,gB;;;;;gBAAjB,gB;;;;;;;;YEnxBJ,WAAO,cAAP,mB;cAAA,gB;;;;YACI,IAAI,oCAAJ,C;cFmxB0B,gB;8BAAA,iCEnxBN,cFmxBe,SAAT,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cEnxB1B,gB;;;;;YAAA,gB;;;YACA,iBAAM,cAAI,K;YAFd,gB;;;YFmxBqB,wB;YAAA,gB;;;YAHrB,wB;;YAEI,gB;;;YAFJ,OAEgB,a;;YAKpB,W;;;;;;;;;;;;;;EAAA,C;;;MARiE,qBAAmB,+CAAnB,C;IAAA,C;;;IAY7D,0BAA2B,IAA3B,EAAqD,IAArD,EAAkE,UAAM,IAAN,EAAY,KAAZ,CAAlE,C;EAAA,C;;IAQA,MAAM,S;EACV,C;;EASyF,C;;IAK1B,Y;EAAA,C;;EAKH,C;;EAOW,C;;IAInE,OAAG,iBAAH,SAAmB,oBAAnB,M;EAAA,C;;IAK4C,gC;EAAA,C;EGh4BpD,yD;;IHo4BqB,IAAN,I;IADP,YAAY,IAAK,c;IAEb,kBADS,KACT,wB;MG/3BY,gBAAhB,wB;MHg4BQ,IAAU,eAAN,QAAJ,C;QpBt0BZ,SoBs0ByC,gBAAO,YAAP,C;MAC7B,IAAU,gBAAV,C;QpBv0BZ,SoBu0BkC,gBAAO,YAAP,C;MAFV,OpBp0BjB,SuB3DkC,W;;UHm4BjC,kBALS,KAKT,yB;MAAiB,OAAI,KAAM,SAAV,GAAoB,QAApB,GAAkC,K;SACnD,kBANS,KAMT,a;MAAgB,kB;SAChB,kBAPS,KAOT,0B;MAA6B,+B;;MACrB,kB;IARZ,W;EAUJ,C;;;;;;;;;IAYI,0B;IACA,0B;IACA,4B;EAHmB,C;;;MACnB,0B;IAAA,C;;;;MAIuC,6B;IAAA,C;;;;;;;;IAI/B,yDAAqB,2B;EAArB,C;;IAOR,yB;IADA,kC;EADmB,C;;;MACnB,8B;IAAA,C;;MAAA,kC;IAAA,C;;;;MAEoC,W;IAAA,C;;;IAGhC,IAAI,aAAJ,C;MAAc,OAAO,K;IACrB,gBAAW,I;IACX,OAAO,I;EACX,C;;IG16BgB,gBAAhB,wB;IvB0DJ,SoBm3BQ,gBAAO,MAAP,C;IpBn3BR,SoBo3BQ,gBAAW,aAAJ,GAAc,UAAd,GAA8B,OAArC,C;IpBp3BR,SoBq3BQ,gBAAO,GAAP,C;IACA,gBAAY,IAAZ,C;IE93BJ,UAAgB,S;IAChB,OAAO,kBAAP,C;MACI,IAAI,2BAAJ,C;QAAc,WAAM,G;QF83BhB,IAAI,OAAJ,C;UAAW,UAAQ,K;;UpBx3B/B,SoBw3B0C,gBAAO,IAAP,C;QpBx3B1C,SoBy3BY,gBAAO,IAAP,C;;ME93BJ,MAAM,GAAI,K;;ItBKlB,SoB23BQ,gBAAO,GAAP,C;IAT8B,OpBj3B/B,SuB3DkC,W;EH46BH,C;;;;;;;;MAqBsB,gE;IAAA,C;;;IAGxD,YAAY,IAAK,c;ItBt3BrB,IAAI,CsBu3BM,4CtBv3BV,C;MACI,csBs3B8B,gC;MtBr3B9B,MAAM,2BAAsB,OAAQ,WAA9B,C;;IsBs3BN,OAAa,2BAAN,KAAM,C;EACjB,C;;IAMI,YAAY,IAAK,c;ItB/3BrB,IAAI,CsBg4BM,4CtBh4BV,C;MACI,csB+3B8B,gC;MtB93B9B,MAAM,2BAAsB,OAAQ,WAA9B,C;;IsB+3BN,IAAI,4CAAJ,C;MAAqC,MAAM,KAAM,U;IACjD,OAAO,K;EACX,C;;IAMI,YAAY,IAAK,c;IACjB,IAAI,4CAAJ,C;MAEI,IAAI,4CAAJ,C;QAAqC,MAAM,KAAM,U;MACjD,OAAO,K;;IAEX,Y;IACA,OAAO,iC;EACX,C;;IAGoC,qB;MAC5B,YAAY,eAAK,c;MtBr5BzB,IAAI,CsBs5BU,4CtBt5Bd,C;QACI,csBq5BkC,2B;QtBp5BlC,MAAM,2BAAsB,OAAQ,WAA9B,C;;MsBq5BF,IAAI,4CAAJ,C;QACI,YAAK,6BAAoB,KAAM,UAA1B,C;;QAEL,YAAK,cAAO,KAAP,C;MACb,W;IAPgC,C;EAAA,C;;IAQR,qB;MAAE,cAAO,U;MAAU,W;IAAnB,C;EAAA,C;;IAT2C,uB;MACnE,aAAa,2DAAmB,4DAAnB,C;MAQb,IAAK,4BAAmB,+CAAnB,C;MACT,W;IAVuE,C;EAAA,C;;IAA5B,OVr0BlB,qCAHK,KAGL,EUq0B8C,oCVr0B9C,CUq0BkB,qB;EAAA,C;;;;;;;;;;;;;;;IA0B3B,kC;EAAD,C;;;MAAC,8B;IAAA,C;;;;MACgC,W;IAAA,C;;;IACd,mBAAa,aAAJ,GAAc,QAAd,GAA4B,KAArC,O;EAAA,C;;;;;;;IAGhB,sB;MAAA,SAAe,I;IAAQ,sBAAW,IAAX,C;IAClC,mCAAsB,MAAtB,C;EADU,C;;;MAEsB,gC;IAAA,C;;;;;;;;IAOvC,yB;IADA,c;EADwC,C;;;MAGK,W;IAAA,C;;;;MACS,W;IAAA,C;;;IACtB,Q;IAAmB,CAAnB,8DAAmB,qBAAW,IAAX,C;EAApB,C;;;;;;;IAO/B,mBAAa,GAAb,C;IADA,wB;EAF4B,C;;IAIc,cAAQ,CAAO,MAAP,C;EAAR,C;;IAChB,2B;EAAA,C;;;;;;;IASqC,mBAAW,GAAX,C;EAAX,C;;;;;;;IAKpD,+BAAyB,GAAzB,C;IADA,wB;IAEA,iBACsB,K;EALQ,C;;IAO1B,IAAI,cAAJ,C;MAAa,M;IACb,iBAAU,I;IACV,cAAQ,CAAO,MAAP,C;EACZ,C;;IAC0B,6B;EAAA,C;;;;;;;IAM1B,+BAAgC,MAAhC,C;IADA,wB;EAFgB,C;;IAMZ,aAAS,gBAAO,QAAI,2BAAX,C;EACb,C;;IACkC,kBAAQ,aAAR,M;EAAA,C;;;;;;;II5iCtC,8B;IAWsC,2CAAgC,qBAAhC,C;EAXtC,C;;;MAamD,W;IAAA,C;;;;MAGE,Y;IAAA,C;;;;MAGA,Y;IAAA,C;;;IAGV,Y;EAAA,C;;IAInC,MAAM,qCAA8B,2BAA9B,C;EACV,C;;IAGwE,MAAM,2BAAsB,2BAAtB,C;EAAN,C;;IAIpE,wC;EAAA,C;;IAGqD,Y;EAAA,C;;;MAI7C,sB;IAAA,C;;;IAIoD,wC;EAAA,C;;;;;;;;IA7CpE,qC;MAAA,oB;;IAAA,8B;EAAA,C;;ICqBI,uB;MAAA,UAA4B,iB;IAC5B,qB;MAAA,4C;IACA,sB;MAAA,SAAe,I;IAGf,OAAqC,UAArC,MAAM,OAAN,EAAe,KAAf,EAAsB,MAAtB,EAA8B,KAA9B,CAAqC,C;EAArC,C;;IAOuB,qB;MACf,QAAQ,6C;MACR,IAAI,SAAJ,C;QACI,eAAO,CAAP,C;;;QAEA,gBAAQ,6BAAR,C;;MAER,W;IAPmB,C;EAAA,C;;IADE,kC;MACrB,0DAAmB,wDAAnB,C;MAQJ,W;IATyB,C;EAAA,C;;IAAzB,cAAc,YAAW,2BAAX,C;IAUN,OAAR,YAA+B,S;IAC/B,OAAO,O;EACX,C;;IAQkE,uD;qBAAA,mF;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,8C;EAAU,C;;;;;;;;;;;;;YAAR,gB;4BAAA,yC;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAQ,C;;IAFxE,eAAe,SAAY,S;IAE3B,OAAO,8BAAY,iEAA2C,4BAA3C,C;EACvB,C;;IAWsB,qB;MAAE,YAAK,cAAO,EAAP,C;MAAW,W;IAAlB,C;EAAA,C;;IACD,qB;MAAE,YAAK,6BAAoB,EAApB,C;MAAwB,W;IAA/B,C;EAAA,C;;IAHsD,uB;MACvE,UAAW,MACO,yBADP,EAEM,2BAFN,C;MAGf,W;IAJ2E,C;EAAA,C;;IfoF9C,uB;MACrB,kBAAkB,gCAA4B,IAA5B,EAA+C,qCAA/C,C;MAClB,IAAI,CAAC,0BAAL,C;QAAyB,WAAY,qB;MACrC,cAAM,WAAN,C;MAFA,OAGA,WAAY,Y;IAJS,C;EAAA,C;;IepFkB,OfoFlB,qCAHK,KAGL,EepF8C,uBfoF9C,CepFkB,qB;EAAA,C;;ICxCX,uB;MAC5B,oBAAa,qBAAiB,YAAjB,EAAuB,IAAvB,CAAb,EAA2C,aAA3C,C;IAD4B,C;EAAA,C;;I5BdhC,IAAI,E4BYI,QAAQ,C5BZZ,CAAJ,C;MACI,c4BWiB,8C;M5BVjB,MAAM,8BAAyB,OAAQ,WAAjC,C;;I4BWV,IAAI,0CAAQ,gBAAR,MAAJ,C;MAAgB,MAAM,0BAAsB,uBAAtB,C;IACtB,OAAgC,+BAAhC,qB;EAGJ,C;;IAOI,WAAW,SAAU,K;IACrB,cAAc,IAAK,Q;IACT,oBAAV,SAAU,EAA4B,UAAR,OAAQ,CAAM,yBAAgB,SAAU,KAA1B,EAAgC,SAAhC,CAAlC,C;IAGV,OAAiB,4BAAV,SAAU,EAA0B,SAA1B,EAAqC,KAArC,C;EACrB,C;;IAKI,6BAAqB,IAAK,QAA1B,EAA4C,IAA5C,C;IAFA,gB;IACA,gB;EAF2C,C;;;MAIC,kB;IAAA,C;;;IAIxC,oBAAO,+BAA6B,SAA7B,EAAmC,IAAnC,CAAP,C;EACJ,C;;IAOwB,Q;IAHpB,IAAI,4CAAJ,C;MACS,wBAAL,SAAK,EAAwB,KAAM,UAA9B,EAAyC,IAAzC,C;;MAEA,WAAL,SAAK,EAAW,sEAAX,EAAuB,IAAvB,C;;EACb,C;;IAGI,6BAAmB,SAAnB,M;EAAA,C;;;;;;;IAsB4B,uB;MAC5B,oBAAa,2BAAuB,YAAvB,EAA6B,IAA7B,CAAb,EAAiD,aAAjD,C;IAD4B,C;EAAA,C;;I5B1EhC,IAAI,E4BwEI,QAAQ,C5BxEZ,CAAJ,C;MACI,c4BuEiB,8C;M5BtEjB,MAAM,8BAAyB,OAAQ,WAAjC,C;;I4BuEV,IAAI,0CAAQ,gBAAR,MAAJ,C;MAAgB,OAAO,I;IACvB,OAAgC,qCAAhC,qB;EAGJ,C;;IAKI,4BAAwB,IAAxB,EAA8B,IAA9B,C;EAHmC,C;;IAYX,Q;IANpB,IAAI,4CAAJ,C;MACI,gBAAgB,KAAM,U;MACtB,IAAI,0DAA6C,SAAU,kBAAV,KAAwB,IAAzE,C;QACS,WAAL,SAAK,EAAW,IAAX,EAAiB,IAAjB,C;;QACA,wBAAL,SAAK,EAAwB,SAAxB,EAAmC,IAAnC,C;;;MAEJ,WAAL,SAAK,EAAW,sEAAX,EAAuB,IAAvB,C;;EACb,C;;IAGI,mCAAyB,SAAzB,M;EAAA,C;;;;;;;ICnGQ,Q;IADZ,U;IAAA,KACY,OAAZ,SAAY,oBADZ,U;MAAA,a;;MAC0D,kBAAvB,qBAAiB,SAAjB,C;MAC/B,gC3BwDE,W;M2B1DN,S3B2DO,W;;I2B3DP,a;EAAA,C;;IAWkF,uB;MAClF,gDAAyB,iBAAQ,IAAR,C;MAC7B,W;IAFsF,C;EAAA,C;;IjBoIzD,uB;MACrB,kBAAkB,gCAA4B,IAA5B,EAA+C,qCAA/C,C;MAClB,IAAI,CAAC,0BAAL,C;QAAyB,WAAY,qB;MACrC,cAAM,WAAN,C;MAFA,OAGA,WAAY,Y;IAJS,C;EAAA,C;;IiBpI6B,OjBoI7B,qCAHK,KAGL,EiBpIyD,qCjBoIzD,CiBpI6B,qB;EAAA,C;;IAM1C,Q;IADZ,U;IAAA,KACY,OAAZ,SAAY,wBADZ,U;MAAA,a;;MACkE,kBAA3B,yBAAqB,SAArB,C;MACnC,oC3BwCE,W;M2B1CN,S3B2CO,W;;I2B3CP,a;EAAA,C;;IAK+B,wB;IAC/B,oBAAgC,sBAAP,aAAO,C;IAChC,mBAAwB,K;IACxB,iBAAsB,W;IACtB,cAAmB,W;IACnB,mBAAwB,G;EALM,C;;IAWO,qB;MACzB,wCAAY,E;MACZ,WAAW,mC;MACX,sCAAU,gC;MACV,mCAAO,I;MACP,wCAAY,K;MACZ,mC;MACJ,W;IAP6B,C;EAAA,C;;IAHjC,WAAK,aAAI,IAAJ,C;IACL,IAAI,CAAC,gBAAL,C;MACI,mBAAY,I;MACZ,aAAO,uBAAsB,yCAAtB,C;;EASf,C;;IAI8B,Q;IAD1B,OAAM,IAAN,C;MAC0B,OAAR,cAAQ,O;MAAR,iB;QAAkB,M;;MAAhC,cAAc,I;MACT,OAAsB,4BAAX,iBAAW,EAAmB,gBAAnB,C;;EAEnC,C;;;;;;;ICzCA,cAAc,IAAK,Q;IACX,gBAAR,OAAQ,C;IACR,IAAI,4CAAJ,C;MAA2C,OAAU,I;IACrD,IAAI,CAAC,IAAK,WAAW,0BAAiB,OAAjB,CAArB,C;MAAgD,OAAU,I;IAC1D,IAAK,uBAAc,IAAd,C;IAJL,OAKA,mB;EACJ,C;;IAP0C,OAAyB,YAAzB,qB;EAAA,C;;IAUtC,UAAU,sBAAI,qBAAJ,C;IACV,IAAI,eAAe,CAAC,GAAI,SAAxB,C;MAAkC,MAAM,GAAI,2B;EAChD,C;;INlBI,sBAAkB,I;IAElB,sBAAkB,I;IAElB,2BAAgC,K;IAEhC,eAA8B,cAAS,I;EAV3C,C;;;MAII,0B;IAAA,C;;MAAA,0B;IAAA,C;;;;MAEA,0B;IAAA,C;;MAAA,0B;IAAA,C;;;;MAEA,+B;IAAA,C;;MAAA,oC;IAAA,C;;;IAKI,WAAW,IAAK,K;IAChB,YAAY,I;IACZ,YAAY,I;IACZ,YAAY,I;IACZ,YAAY,I;EAChB,C;;IAGI,IAAI,cAAJ,C;MAAe,OAAO,K;IACtB,WAAW,IAAK,K;IAChB,WAAW,IAAK,K;IAChB,YAAY,I;IACZ,YAAY,I;IACZ,iBAAY,I;IACZ,OAAO,I;EACX,C;;;;;;;IAM+B,yB;EAHnC,C;;;MAI+B,qBAAS,I;IAAT,C;;qKAE3B,yB;IAAA,0B;IAAA,kC;MAII,UAAgB,S;MAChB,OAAO,aAAO,IAAP,CAAP,C;QACI,IAAI,QAAJ,C;UAAc,MAAM,GAAN,C;QACd,MAAM,GAAI,K;;IAElB,C;GATA,C;;IAYqC,MAAM,oC;EAAN,C;;IAGjC,WAAW,S;IACX,IAAI,SAAS,IAAb,C;MAAmB,OAAO,I;IAC1B,IAAK,S;IACL,OAAO,I;EACX,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cpBtDoB,WAAO,WAAP,C;wBCF+B,C;qBACH,C;gBACL,C;sBACM,C;gBACN,C;cKHjB,C;cACA,C;YACF,C;gBIgBE,W;EAO6B,Q;EAKvD,YiByB0C,OjBzBjC,SAAT,EAAuB,WAAvB,KAAoC,iBAApC,IAAyD,SAAU,QAAV,IAAqB,aAA9E,C;IACI,2B;;IAEJ,qBiBsB0C,OjBtBjC,MAAT,EAAoB,WAApB,KAAwC,MAAP,Q;IAAjC,W;MAA+D,iBiBsBrB,OjBtBqC,MAAY,iBAA5B,EAAiD,WAAjD,C;;IAA/D,W;MACW,6BAAP,MAAO,C;;MAEH,2B;;;6BQg8BkC,C;8BACC,C;8BACA,C;kCAEG,C;yBACT,C;gCACO,C;aAGzB,UAAM,KAAN,C;gBAEG,UAAM,IAAN,C;;;;"}